# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push events but only for the branch2
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Write Config & Key Files in ~/.oci
    - name: Write Config & Key Files
      run: |
        mkdir ~/.oci
        echo "[DEFAULT]" >> ~/.oci/config
        echo "user=${{secrets.USER_OCID}}" >> ~/.oci/config
        echo "fingerprint=${{secrets.FINGERPRINT}}" >> ~/.oci/config
        echo "region=${{secrets.REGION}}" >> ~/.oci/config
        echo "tenancy=${{secrets.TENANCY_OCID}}" >> ~/.oci/config
        echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
        echo "${{secrets.API_KEY}}" >> ~/.oci/oci_api_key.pem   
        echo "${{secrets.SSH_PUB_KEY}}" | tr -d '\r' > ~/.oci/id_rsa.pub
    
    
    # Install OCI CLI
    - name: Install OCI CLI
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults
        echo "::add-path::/home/runner/bin"
        exec -l $SHELL
        
    # fix the permissions on those files so we can use the CLI
    - name: Fix Config File Permissions
      run: |
        oci setup repair-file-permissions --file /home/runner/.oci/config
        oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem
      
      
    - name: Download image_ocid from bucket
      run: |
        oci os object get \
        -bn CI-CD-Laura \
        --name image_ocid.txt \
        --file image_ocid.txt
    
    
    # Create the instance from the image ocid
    - name: Create Instance
      run: |
        image_ocid=$(cat image_ocid.txt)
        oci compute instance launch \
        --compartment-id ${{secrets.COMPARTMENT_OCID}} \
        --availability-domain ${{secrets.AVAILABILITY_DOMAIN}} \
        --shape ${{secrets.SHAPE}} \
        --assign-public-ip true \
        --display-name ci-cd \
        --image-id $image_ocid \
        --ssh-authorized-keys-file /home/runner/.oci/id_rsa.pub \
        --subnet-id ${{secrets.SUBNET_OCID}} \
        --wait-for-state RUNNING

        
        
    # Create Instance principal from instance ocid
    - name: Instance Principal
      run: |
        instance_id=$(oci compute instance list --compartment-id ${{secrets.COMPARTMENT_OCID}} --lifecycle-state "RUNNING" --query "data [?\"display-name\"=='ci-cd'].{OCID:\"id\"}" | grep OCID | awk -F'[\"|\"]' '{print $4}')
        echo $instance_id
        oci iam dynamic-group create \
        --description "CI/CD" \
        --matching-rule "ALL {instance.id = $instance_id}" \
        --name "CI-CD-Laura" \
        --compartment-id ${{secrets.TENANCY_OCID}} \
        --wait-for-state "ACTIVE"
        oci iam policy create \
        --compartment-id ${{secrets.TENANCY_OCID}} \
        --name "CI-CD-Packer-test" \
        --statements '["allow dynamic-group CI-CD-Laura to manage instance-family in tenancy"]' \
        --description "CI/CD testing"

  
    
    - name: Create provider.auto.tfvars
      run: |
        echo 'provider_oci = {' >> ~/.oci/provider.auto.tfvars
        echo 'tenancy="${{secrets.TENANCY_OCID}}"' >> ~/.oci/provider.auto.tfvars
        echo 'user_id="${{secrets.USER_OCID}}"' >> ~/.oci/provider.auto.tfvars
        echo 'fingerprint="${{secrets.FINGERPRINT}}"' >> ~/.oci/provider.auto.tfvars        
        echo 'key_file_path="~/.oci/oci_api_key.pem"' >> ~/.oci/provider.auto.tfvars 
        echo 'region="${{secrets.REGION}}"' >> ~/.oci/provider.auto.tfvars
        echo "}" >> ~/.oci/provider.auto.tfvars
    
    
    - name: Create ssh key pairs
      run: |
        mkdir ~/.ssh
        echo "${{secrets.SSH_PUB_KEY}}" | tr -d '\r' > ~/.ssh/id_rsa.pub
        echo "${{secrets.SSH_PRIV_KEY}}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Copy provider.auto.tfvars file on instance
      run: |
        instance_id=$(oci compute instance list --compartment-id ${{secrets.COMPARTMENT_OCID}} --lifecycle-state "RUNNING" --query "data [?\"display-name\"=='ci-cd'].{OCID:\"id\"}" | grep OCID | awk -F'[\"|\"]' '{print $4}')
        instance_ip=$(oci compute instance list-vnics --instance-id $instance_id --query "data [*].{ip:\"public-ip\"}" | grep ip | awk -F'[\"|\"]' '{print $4}')        
        scp -r -o "StrictHostKeyChecking no" ~/.oci/provider.auto.tfvars opc@$instance_ip:/home/opc
        ssh opc@$instance_ip sudo mv provider.auto.tfvars /home/opc/learning-library/solutions-library/infrastructure-automation/thunder
      
    - name: Bucket cleanup
      run: |
        oci os object delete -bn CI-CD-Laura --name image_ocid.txt --force
        oci os bucket delete -bn CI-CD-Laura --force
