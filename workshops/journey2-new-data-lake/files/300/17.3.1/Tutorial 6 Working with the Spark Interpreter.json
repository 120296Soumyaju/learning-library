{"paragraphs":[{"text":"%md\n# Demonstration: Citi Bike New York - Working with the Spark Interpeter\n\nThis tutorial was built for BDCS-CE version 17.3.1. If you are using a later version of BDCS-CE, there may be a newer version of this tutorial notebook at <https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake> . Questions and feedback about the tutorial: david.bayard@oracle.com\n\n\n    Be sure you previously ran the Tutorial: \"Citi Bike New York Demo Introduction and Setup\" which places the necessary CSV File into the \"citibike\" Object Store container.\n\nThis tutorial will illustrate how to run Spark interpreter to define a temporary Spark SQL table against a CSV file and then query it.\n\n## Contents\n+ Configuring Spark to read CSV files\n+ Reading the data and registering as a Spark SQL table\n+ Querying bike trip information\n+ Next Steps\n\nAs a reminder, the documentation for BDCS-CE can be found here: <http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html>","user":"anonymous","dateUpdated":"2017-07-28T00:51:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Demonstration: Citi Bike New York - Working with the Spark Interpeter</h1>\n<p>This tutorial was built for BDCS-CE version 17.3.1. If you are using a later version of BDCS-CE, there may be a newer version of this tutorial notebook at <a href=\"https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake\">https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake</a> . Questions and feedback about the tutorial: <a href=\"mailto:&#x64;&#97;&#118;i&#x64;&#46;b&#x61;&#x79;a&#114;&#100;&#64;o&#114;&#x61;c&#x6c;&#x65;.co&#x6d;\">&#x64;&#97;&#118;i&#x64;&#46;b&#x61;&#x79;a&#114;&#100;&#64;o&#114;&#x61;c&#x6c;&#x65;.co&#x6d;</a></p>\n<pre><code>Be sure you previously ran the Tutorial: &quot;Citi Bike New York Demo Introduction and Setup&quot; which places the necessary CSV File into the &quot;citibike&quot; Object Store container.\n</code></pre>\n<p>This tutorial will illustrate how to run Spark interpreter to define a temporary Spark SQL table against a CSV file and then query it.</p>\n<h2>Contents</h2>\n<ul>\n  <li>Configuring Spark to read CSV files</li>\n  <li>Reading the data and registering as a Spark SQL table</li>\n  <li>Querying bike trip information</li>\n  <li>Next Steps</li>\n</ul>\n<p>As a reminder, the documentation for BDCS-CE can be found here: <a href=\"http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html\">http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017271_1696630414","id":"20170414-131903_889251720","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:51:27+0000","dateFinished":"2017-07-28T00:51:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4180"},{"text":"%md\n# About Spark and Spark SQL\n\nBDCS-CE version 17.3.1 comes with Spark version 1.6.1, Scala version 2.10, and Python version 2.6.6.  This BDCS-CE version supplies Zeppelin interpreters for Spark(Scala), Spark(Python), and Spark SQL.  This tutorial will give you examples using all of these.\n\nThe tutorial assumes you have a basic knowledge about Spark.  To learn more about Spark, check out <https://spark.apache.org/docs/1.6.1/quick-start.html> and <https://spark.apache.org/docs/1.6.1/sql-programming-guide.html>\n\n","user":"anonymous","dateUpdated":"2017-07-28T00:51:54+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>About Spark and Spark SQL</h1>\n<p>BDCS-CE version 17.3.1 comes with Spark version 1.6.1, Scala version 2.10, and Python version 2.6.6. This BDCS-CE version supplies Zeppelin interpreters for Spark(Scala), Spark(Python), and Spark SQL. This tutorial will give you examples using all of these.</p>\n<p>The tutorial assumes you have a basic knowledge about Spark. To learn more about Spark, check out <a href=\"https://spark.apache.org/docs/1.6.1/quick-start.html\">https://spark.apache.org/docs/1.6.1/quick-start.html</a> and <a href=\"https://spark.apache.org/docs/1.6.1/sql-programming-guide.html\">https://spark.apache.org/docs/1.6.1/sql-programming-guide.html</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017271_1696630414","id":"20170616-103849_1176559517","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:51:54+0000","dateFinished":"2017-07-28T00:51:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4181"},{"text":"%md\n## Configuring Spark to read CSV files\n\nThe next step is to configure the Zeppelin Spark Interpreter to read CSV files.  BDCS-CE version 17.3.1 includes Spark version 1.6.1 (it also includes Spark2, but this tutorial is built assuming Spark 1.6).  This version of Spark can read CSVs, but the functionality is not loaded in Spark by default.  To use the CSV functionality, we need to add it as a dependency.\n\nFollow this procedure (hint: you might want to open up a new browser window so you can keep this instructions open):\n + Go to the Settings tab\n + Click on Notebook\n + In the Spark Interpreter section, click on Edit\n + Scroll down to the bottom of the Spark section, type in com.databricks:spark-csv_2.10:1.5.0 in the Artifact field to add a new dependency\n![csv image](https://raw.githubusercontent.com/oracle/learning-library/master/workshops/journey2-new-data-lake/images/300/snap0011518.jpg \"CSV Dependency\")\n + Click the Save button at the bottom of the Spark section\n + Then, click the OK button to restart the Spark interpreter to pick up the new settings\n\nHere is an animation of the above:\n![sparkCSVvideo](https://raw.githubusercontent.com/oracle/learning-library/master/workshops/journey2-new-data-lake/images/300/SparkCSV.gif \"sparkCSVvideo\")\n\nFor more details about Spark CSV support, see <https://github.com/databricks/spark-csv>.  As an aside, Zeppelin has a Spark Dependency interpreter (%dep) but that interpreter is depreciated and you will find that packages you list via the %dep interpreter will not be picked up if you leverage Spark SQL.  Therefore, you should use the Settings tab to define your Spark dependencies, not the %dep interpreter.","user":"anonymous","dateUpdated":"2017-07-28T00:52:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Configuring Spark to read CSV files</h2>\n<p>The next step is to configure the Zeppelin Spark Interpreter to read CSV files. BDCS-CE version 17.3.1 includes Spark version 1.6.1 (it also includes Spark2, but this tutorial is built assuming Spark 1.6). This version of Spark can read CSVs, but the functionality is not loaded in Spark by default. To use the CSV functionality, we need to add it as a dependency.</p>\n<p>Follow this procedure (hint: you might want to open up a new browser window so you can keep this instructions open):<br/> + Go to the Settings tab<br/> + Click on Notebook<br/> + In the Spark Interpreter section, click on Edit<br/> + Scroll down to the bottom of the Spark section, type in com.databricks:spark-csv_2.10:1.5.0 in the Artifact field to add a new dependency<br/><img src=\"https://raw.githubusercontent.com/oracle/learning-library/master/workshops/journey2-new-data-lake/images/300/snap0011518.jpg\" alt=\"csv image\" title=\"CSV Dependency\" /><br/> + Click the Save button at the bottom of the Spark section<br/> + Then, click the OK button to restart the Spark interpreter to pick up the new settings</p>\n<p>Here is an animation of the above:<br/><img src=\"https://raw.githubusercontent.com/oracle/learning-library/master/workshops/journey2-new-data-lake/images/300/SparkCSV.gif\" alt=\"sparkCSVvideo\" title=\"sparkCSVvideo\" /></p>\n<p>For more details about Spark CSV support, see <a href=\"https://github.com/databricks/spark-csv\">https://github.com/databricks/spark-csv</a>. As an aside, Zeppelin has a Spark Dependency interpreter (%dep) but that interpreter is depreciated and you will find that packages you list via the %dep interpreter will not be picked up if you leverage Spark SQL. Therefore, you should use the Settings tab to define your Spark dependencies, not the %dep interpreter.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017272_1694706669","id":"20170417-082204_950298429","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:52:41+0000","dateFinished":"2017-07-28T00:52:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4182"},{"text":"%md\n## Before you continue...\n\n    Before you continue, be sure that you followed the manual instructions in the Paragraph above to configure the Spark CSV support. ","user":"anonymous","dateUpdated":"2017-07-28T00:52:58+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Before you continue&hellip;</h2>\n<pre><code>Before you continue, be sure that you followed the manual instructions in the Paragraph above to configure the Spark CSV support.\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017272_1694706669","id":"20170417-085159_2076873409","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:52:58+0000","dateFinished":"2017-07-28T00:52:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4183"},{"text":"%md\n## Reading the data and registering as a Spark SQL table\n\nThe next step is to use Spark to read our bike data CSV file that we uploaded to the Object Store.  Once we read the CSV into a Spark Data Frame, we will ask Spark to cache the data in memory.  Then we will register the data frame as a Spark SQL temp table.\n\nYou can review the Spark SQL programming guide for a refresher about Data Frames and Temporary Tables: <https://spark.apache.org/docs/1.6.1/sql-programming-guide.html>\n\n","user":"anonymous","dateUpdated":"2017-07-28T00:53:05+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Reading the data and registering as a Spark SQL table</h2>\n<p>The next step is to use Spark to read our bike data CSV file that we uploaded to the Object Store. Once we read the CSV into a Spark Data Frame, we will ask Spark to cache the data in memory. Then we will register the data frame as a Spark SQL temp table.</p>\n<p>You can review the Spark SQL programming guide for a refresher about Data Frames and Temporary Tables: <a href=\"https://spark.apache.org/docs/1.6.1/sql-programming-guide.html\">https://spark.apache.org/docs/1.6.1/sql-programming-guide.html</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017272_1694706669","id":"20170417-090240_1793194469","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:53:05+0000","dateFinished":"2017-07-28T00:53:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4184"},{"title":"Spark Scala to read CSV and register as table","text":"%spark\n\n//a previous tutorial placed the csv file into your Object Store citibike container\n//notice the use of the swift://CONTAINER.defaut/ syntax\n\nval df = sqlContext.read.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").load(\"swift://citibike.default/201612-citibike-tripdata.csv\")\n\n//cache the data frame for performance\ndf.cache()\n\n\nprintln(\"Here is the schema detected from the CSV\")\ndf.printSchema()\nprintln(\"..\")\n\nprintln(\"# of rows: %s\".format(\n  df.count() \n)) \nprintln(\"..\")\n\ndf.registerTempTable(\"bike_trips_temp\")\nprintln(\"done\")","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"graph":{"mode":"table","height":247,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{"container":"dcb-bdcs-apr12","CONTAINER":"citibike","FILENAME":"201612-citibike-tripdata"},"forms":{}},"apps":[],"jobName":"paragraph_1501203017273_1694321920","id":"20170414-134031_1271833288","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4185"},{"text":"%md\n# Querying the bike trip information\n\nNow we can show some examples of querying our bike_trips table.  You will need to have first run the above paragraph to ensure that the temporary table bike_trips_temp is registered in your current Spark Session.","user":"anonymous","dateUpdated":"2017-07-28T00:53:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Querying the bike trip information</h1>\n<p>Now we can show some examples of querying our bike_trips table. You will need to have first run the above paragraph to ensure that the temporary table bike_trips_temp is registered in your current Spark Session.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017273_1694321920","id":"20170417-093337_291620887","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:53:14+0000","dateFinished":"2017-07-28T00:53:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4186"},{"title":"Trips by Gender","text":"%sql\nselect \n case when a.gender=1 then 'Male' when a.gender=2 then 'Female' else 'unknown' end gender ,\n        a.trip_count \nfrom (select gender, count(*) trip_count from bike_trips_temp\ngroup by gender) a","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":6,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"pieChart","height":294,"optionOpen":false,"keys":[{"name":"gender","index":0,"aggr":"sum"}],"values":[{"name":"trip_count","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"gender","index":0,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"gender\ttrip_count\nunknown\t42399\nMale\t596628\nFemale\t173165\n"}]},"apps":[],"jobName":"paragraph_1501203017273_1694321920","id":"20170417-095126_1698083225","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4187"},{"title":"Trips by Day of Month","text":"%sql\nselect dayofmonth, count(*)\nfrom (select date_format(`Start Time`,\"H\") hour,\n date_format(`Start Time`,\"E\") dayofweek,\n date_format(`Start Time`,\"d\") dayofmonth\nfrom bike_trips_temp) bike_times\ngroup by dayofmonth","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":6,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"lineChart","height":314,"optionOpen":false,"keys":[{"name":"dayofmonth","index":0,"aggr":"sum"}],"values":[{"name":"_c1","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"dayofmonth","index":0,"aggr":"sum"},"yAxis":{"name":"_c1","index":1,"aggr":"sum"}},"forceY":true}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dayofmonth\t_c1\n1\t43242\n2\t42371\n3\t29854\n4\t27455\n5\t35932\n6\t33332\n7\t38021\n8\t39626\n9\t33547\n10\t22379\n11\t17799\n12\t29037\n13\t39025\n14\t37808\n15\t25015\n16\t24490\n17\t6993\n18\t16295\n19\t25649\n20\t27685\n21\t30625\n22\t30889\n23\t26344\n24\t8014\n25\t9924\n26\t10775\n27\t25955\n28\t23601\n29\t13207\n30\t21375\n31\t15928\n"}]},"apps":[],"jobName":"paragraph_1501203017274_1695476167","id":"20170417-095623_1767722062","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4188"},{"title":"Trips by Day of Week and Gender","text":"%sql\nselect dayofweek, count(*)\nfrom (select date_format(`Start Time`,\"H\") hour,\n date_format(`Start Time`,\"E\") dayofweek,\n date_format(`Start Time`,\"d\") dayofmonth,\n case when gender=1 then 'Male' when gender=2 then 'Female' else 'unknown' end gender \nfrom bike_trips_temp) bike_times\nwhere (gender=\"${gender=Male,Male|Female|unknown}\" )\ngroup by dayofweek","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":6,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"dayofweek","index":0,"aggr":"sum"}],"values":[{"name":"_c1","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"dayofweek","index":0,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{"gender":"Male"},"forms":{"gender":{"name":"gender","defaultValue":"Male","options":[{"value":"Male","$$hashKey":"object:5119"},{"value":"Female","$$hashKey":"object:5120"},{"value":"unknown","$$hashKey":"object:5121"}],"hidden":false,"$$hashKey":"object:5112"}}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dayofweek\t_c1\nTue\t93256\nThu\t115590\nSat\t56793\nSun\t47422\nFri\t110437\nMon\t75736\nWed\t97394\n"}]},"apps":[],"jobName":"paragraph_1501203017274_1695476167","id":"20170417-101619_429877425","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4189"},{"title":"Bike Trips by Hour by day of week","text":"%sql\nselect dayofweek, hour, count(*)\nfrom (select date_format(`Start Time`,\"H\") hour,\n date_format(`Start Time`,\"E\") dayofweek,\n date_format(`Start Time`,\"d\") dayofmonth,\n case when gender=1 then 'Male' when gender=2 then 'Female' else 'unknown' end gender \nfrom bike_trips_temp) bike_times\nwhere (gender=\"${gender=Male,Male|Female|unknown}\" )\ngroup by dayofweek, hour","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":6,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"keys":[{"name":"hour","index":1,"aggr":"sum"}],"values":[{"name":"_c2","index":2,"aggr":"sum"}],"groups":[{"name":"dayofweek","index":0,"aggr":"sum"}],"scatter":{"xAxis":{"name":"dayofweek","index":0,"aggr":"sum"},"yAxis":{"name":"hour","index":1,"aggr":"sum"}},"forceY":true,"lineWithFocus":false}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{"gender":"Male"},"forms":{"gender":{"name":"gender","defaultValue":"Male","options":[{"value":"Male","$$hashKey":"object:5193"},{"value":"Female","$$hashKey":"object:5194"},{"value":"unknown","$$hashKey":"object:5195"}],"hidden":false,"$$hashKey":"object:5186"}}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"dayofweek\thour\t_c2\nTue\t20\t3145\nThu\t0\t907\nTue\t21\t2184\nThu\t1\t432\nTue\t22\t1783\nWed\t0\t671\nThu\t2\t244\nTue\t23\t1201\nWed\t1\t301\nThu\t3\t131\nWed\t2\t153\nThu\t4\t202\nWed\t3\t90\nThu\t5\t977\nWed\t4\t168\nThu\t6\t3738\nWed\t5\t774\nThu\t7\t7834\nWed\t6\t2930\nThu\t8\t12893\nWed\t7\t5894\nThu\t9\t8642\nWed\t8\t10195\nWed\t9\t7216\nSat\t10\t3136\nSat\t11\t3781\nFri\t0\t1049\nSat\t12\t4526\nFri\t1\t513\nSat\t13\t4842\nFri\t2\t297\nSat\t14\t4937\nFri\t3\t194\nSat\t15\t5175\nFri\t4\t185\nSat\t16\t4861\nFri\t5\t825\nSat\t17\t4016\nFri\t6\t3124\nSat\t18\t3465\nFri\t7\t6426\nSat\t19\t2820\nFri\t8\t11361\nFri\t9\t8140\nThu\t10\t4607\nThu\t11\t4153\nWed\t10\t3997\nThu\t12\t4779\nWed\t11\t3576\nThu\t13\t4997\nWed\t12\t4160\nThu\t14\t5185\nWed\t13\t4250\nThu\t15\t5866\nWed\t14\t4653\nThu\t16\t7685\nWed\t15\t5201\nThu\t17\t11716\nWed\t16\t6691\nThu\t18\t11064\nSat\t20\t2209\nWed\t17\t9981\nThu\t19\t7186\nSat\t21\t1787\nWed\t18\t9458\nSat\t22\t1501\nWed\t19\t6312\nSat\t23\t1345\nMon\t0\t510\nMon\t1\t231\nMon\t2\t109\nMon\t3\t61\nMon\t4\t85\nMon\t5\t412\nFri\t10\t4852\nMon\t6\t1320\nFri\t11\t4917\nMon\t7\t2777\nFri\t12\t5821\nMon\t8\t6499\nThu\t20\t4751\nFri\t13\t6070\nMon\t9\t5290\nThu\t21\t3303\nFri\t14\t7096\nWed\t20\t4116\nThu\t22\t2591\nFri\t15\t7254\nWed\t21\t2931\nThu\t23\t1707\nFri\t16\t8761\nWed\t22\t2228\nFri\t17\t10088\nWed\t23\t1448\nFri\t18\t8364\nFri\t19\t5501\nSun\t0\t975\nSun\t1\t692\nSun\t2\t470\nSun\t3\t279\nSun\t4\t170\nSun\t5\t116\nSun\t6\t243\nSun\t7\t561\nSun\t8\t1127\nSun\t9\t2012\nFri\t20\t3470\nFri\t21\t2500\nFri\t22\t2078\nFri\t23\t1551\nTue\t0\t584\nMon\t10\t3049\nTue\t1\t268\nMon\t11\t2934\nTue\t2\t138\nMon\t12\t3434\nTue\t3\t106\nMon\t13\t3724\nTue\t4\t195\nMon\t14\t3962\nTue\t5\t801\nMon\t15\t4252\nTue\t6\t3005\nMon\t16\t5336\nTue\t7\t6261\nMon\t17\t8470\nTue\t8\t10771\nMon\t18\t8418\nTue\t9\t7470\nMon\t19\t5581\nSun\t10\t2894\nSun\t11\t3660\nSun\t12\t4178\nSun\t13\t4155\nSun\t14\t4109\nSun\t15\t4155\nSun\t16\t4116\nSun\t17\t3137\nMon\t20\t3740\nSun\t18\t2796\nMon\t21\t2620\nSun\t19\t2317\nMon\t22\t1854\nMon\t23\t1068\nTue\t10\t4077\nTue\t11\t3518\nTue\t12\t4125\nTue\t13\t4537\nTue\t14\t4843\nTue\t15\t5375\nTue\t16\t6750\nSun\t20\t1729\nTue\t17\t9783\nSun\t21\t1424\nTue\t18\t7515\nSat\t0\t1235\nSun\t22\t1288\nTue\t19\t4821\nSat\t1\t782\nSun\t23\t819\nSat\t2\t522\nSat\t3\t291\nSat\t4\t180\nSat\t5\t147\nSat\t6\t424\nSat\t7\t882\nSat\t8\t1523\nSat\t9\t2406\n"}]},"apps":[],"jobName":"paragraph_1501203017275_1695091418","id":"20170414-134451_506665191","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4190"},{"text":"%md\n# Next Steps\n\nSo far, we have downloaded Citi Bike data and stored it into the Object Store.  Then, we configured Spark to be able to work with CSV files.  Then, we read in the data and defined a Spark SQL temporary table with it.  Finally, we demonstrated a number of different queries.  Did you notice any patterns?  For instance, that men use Citi Bikes more than women?  That on workdays (Mon-Fri) there is a peak around 8am and 5pm, but that peak does not exist on Saturday and Sunday?   \n\nIn part2 of this example, we will look at identifying the top stations for bike checkin and checkout and show how to present that data on a map.\n\n","user":"anonymous","dateUpdated":"2017-07-28T00:53:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Next Steps</h1>\n<p>So far, we have downloaded Citi Bike data and stored it into the Object Store. Then, we configured Spark to be able to work with CSV files. Then, we read in the data and defined a Spark SQL temporary table with it. Finally, we demonstrated a number of different queries. Did you notice any patterns? For instance, that men use Citi Bikes more than women? That on workdays (Mon-Fri) there is a peak around 8am and 5pm, but that peak does not exist on Saturday and Sunday? </p>\n<p>In part2 of this example, we will look at identifying the top stations for bike checkin and checkout and show how to present that data on a map.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017276_1693167674","id":"20170417-103925_248941849","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:53:23+0000","dateFinished":"2017-07-28T00:53:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4191"},{"text":"%md\n# Extra Credit - Saving our temporary Spark SQL table as a permanent Hive table\n\nThe next few paragraphs show you how you can save a copy of the Spark SQL temporary table as a new permament Hive table.  This might be useful if you want to use BI tools, like Oracle Data Visualization Desktop, to query the permanent table.\n\nThe only trick is that Hive doesn't like spaces in column names, so we rename our columns in our Create Table as Select statement below.","user":"anonymous","dateUpdated":"2017-07-28T00:53:30+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Extra Credit - Saving our temporary Spark SQL table as a permanent Hive table</h1>\n<p>The next few paragraphs show you how you can save a copy of the Spark SQL temporary table as a new permament Hive table. This might be useful if you want to use BI tools, like Oracle Data Visualization Desktop, to query the permanent table.</p>\n<p>The only trick is that Hive doesn&rsquo;t like spaces in column names, so we rename our columns in our Create Table as Select statement below.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203017277_1692782925","id":"20170505-092652_1652882871","dateCreated":"2017-07-28T00:50:17+0000","dateStarted":"2017-07-28T00:53:30+0000","dateFinished":"2017-07-28T00:53:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4192"},{"title":"Query to list our hive tables BEFORE","text":"%sql\nshow tables","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"table","height":174,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"tableName\tisTemporary\nbike_trips_temp\ttrue\nbike_trips\tfalse\n"}]},"apps":[],"jobName":"paragraph_1501203017277_1692782925","id":"20170505-092452_1351056533","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4193"},{"title":"HiveQL to drop the table (in case you already ran the next step)","text":"%sql\ndrop table bike_trips_parquet","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"title":true,"results":[],"enabled":true,"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1501203017277_1692782925","id":"20170612-094821_740135087","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4194"},{"title":"HiveQL to create a permanent Hive table from our SparkSQL temporary table","text":"%sql\ncreate table bike_trips_parquet\nstored as parquet\nas select `Trip Duration` TRIPDURATION,\n`Start Time` STARTTIME,\n`Stop Time` STOPTIME,\n`Start Station ID` STARTSTATIONID,\n`Start Station Name` STARTSTATIONNAME,\n`Start Station Latitude` STARTSTATIONLATITUDE,\n`Start Station Longitude` STARTSTATIONLONGITUDE,\n`End Station ID` ENDSTATIONID,\n`End Station Name` ENDSTATIONNAME,\n`End Station Latitude` ENDSTATIONLATITUDE,\n`End Station Longitude` ENDSTATIONLONGITUDE,\n`Bike ID` BIKEID,\n`User Type` USERTYPE,\n`Birth Year` BIRTHYEAR,\n`Gender` GENDER\n from bike_trips_temp","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":[],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1501203017278_1693937171","id":"20170414-151953_1584996855","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4195"},{"title":"Query to show our new permanent table in action","text":"%sql\nselect * from bike_trips_parquet limit 5","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tripduration","index":0,"aggr":"sum"}],"values":[{"name":"starttime","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tripduration","index":0,"aggr":"sum"},"yAxis":{"name":"starttime","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"tripduration\tstarttime\tstoptime\tstartstationid\tstartstationname\tstartstationlatitude\tstartstationlongitude\tendstationid\tendstationname\tendstationlatitude\tendstationlongitude\tbikeid\tusertype\tbirthyear\tgender\n528\t2016-12-01 00:00:04\t2016-12-01 00:08:52\t499\tBroadway & W 60 St\t40.76915505\t-73.98191841\t228\tE 48 St & 3 Ave\t40.7546011026\t-73.971878855\t26931\tSubscriber\t1964\t1\n218\t2016-12-01 00:00:28\t2016-12-01 00:04:06\t3418\tPlaza St West & Flatbush Ave\t40.6750207\t-73.97111473\t3358\tGarfield Pl & 8 Ave\t40.6711978\t-73.97484126\t27122\tSubscriber\t1955\t1\n399\t2016-12-01 00:00:39\t2016-12-01 00:07:19\t297\tE 15 St & 3 Ave\t40.734232\t-73.986923\t345\tW 13 St & 6 Ave\t40.73649403\t-73.99704374\t19352\tSubscriber\t1985\t1\n254\t2016-12-01 00:00:44\t2016-12-01 00:04:59\t405\tWashington St & Gansevoort St\t40.739323\t-74.008119\t358\tChristopher St & Greenwich St\t40.73291553\t-74.00711384\t20015\tSubscriber\t1982\t1\n1805\t2016-12-01 00:00:54\t2016-12-01 00:31:00\t279\tPeck Slip & Front St\t40.707873\t-74.00167\t279\tPeck Slip & Front St\t40.707873\t-74.00167\t23148\tSubscriber\t1989\t1\n"}]},"apps":[],"jobName":"paragraph_1501203017278_1693937171","id":"20170503-195617_839333002","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4196"},{"title":"Query to list our Hive tables AFTER","text":"%sql\nshow tables","dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"tableName\tisTemporary\nbike_trips_temp\ttrue\nbike_trips\tfalse\nbike_trips_parquet\tfalse\n"}]},"apps":[],"jobName":"paragraph_1501203017278_1693937171","id":"20170503-195744_526374432","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4197"},{"dateUpdated":"2017-07-28T00:50:17+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1501203017279_1693552422","id":"20170614-163657_1564876178","dateCreated":"2017-07-28T00:50:17+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4198"}],"name":"Tutorial 6 Working with the Spark Interpreter","id":"2CPR7XJQU","angularObjects":{"2CQVFQFWU:shared_process":[],"2CRFREMNU:shared_process":[],"2CPRZVQKR:shared_process":[],"2CQWU46XZ:shared_process":[],"2CPKCF4R9:shared_process":[],"2CR7Y2CFK:shared_process":[],"2CQQM64RT:shared_process":[],"2CQX3UW3S:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}